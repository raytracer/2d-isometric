{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["let loadImage = (url: string): Promise<HTMLImageElement> => {\n    return new Promise(r => { let i = new Image(); i.onload = (() => r(i)); i.src = url; });\n}\n\n\nconst generateBoard = async (height: number, width: number) => {\n    let img = await loadImage(\"./grass.png\");\n    const scale = 1.0;\n    const s = (img.width / 8) - 2;\n    const canvas = document.getElementById('main-canvas');\n    if (canvas) {\n        const ctx = (canvas as HTMLCanvasElement).getContext('2d');\n        if (ctx) {\n            for (let x = 0; x < width; x++) {\n                for (let y = 0; y < height; y++) {\n                    ctx.drawImage(\n                        img,\n                        2 + img.width / 4,\n                        2,\n                        img.width / 4 - 4,\n                        img.height - 4,\n                        s * (width - x + y), (x + y) * (s / 2),\n                        (img.width / 4 - 4) * scale,\n                        (img.height - 4) * scale\n                    );\n\n                }\n            }\n        }\n    }\n};\n\ngenerateBoard(7, 3);"],
  "mappings": ";;AAAA,MAAI,YAAY,CAAC;AACb,WAAO,IAAI,QAAQ;AAAO,UAAI,IAAI,IAAI;AAAS,QAAE,SAAU,MAAM,EAAE;AAAK,QAAE,MAAM;AAAA;AAAA;AAIpF,MAAM,gBAAgB,OAAO,QAAgB;AACzC,QAAI,MAAM,MAAM,UAAU;AAC1B,UAAM,QAAQ;AACd,UAAM,IAAK,IAAI,QAAQ,IAAK;AAC5B,UAAM,SAAS,SAAS,eAAe;AACvC,QAAI;AACA,YAAM,MAAO,OAA6B,WAAW;AACrD,UAAI;AACA,iBAAS,IAAI,GAAG,IAAI,OAAO;AACvB,mBAAS,IAAI,GAAG,IAAI,QAAQ;AACxB,gBAAI,UACA,KACA,IAAI,IAAI,QAAQ,GAChB,GACA,IAAI,QAAQ,IAAI,GAChB,IAAI,SAAS,GACb,IAAK,SAAQ,IAAI,IAAK,KAAI,KAAM,KAAI,IACnC,KAAI,QAAQ,IAAI,KAAK,OACrB,KAAI,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAS3C,gBAAc,GAAG;",
  "names": []
}
