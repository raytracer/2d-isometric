{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["const loadImage = (url: string): Promise<HTMLImageElement> => {\n    return new Promise(r => { let i = new Image(); i.onload = (() => r(i)); i.src = url; });\n}\n\nconst getRandomInt = (max: number) => {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\ninterface Drawable {\n    x: number;\n    y: number;\n    z: number;\n    draw: (ctx: CanvasRenderingContext2D) => void;\n}\n\nlet scale = 1.0;\nlet offsetX = 0;\nlet offsetY = 0;\nconst divider = window.navigator.platform.toLowerCase().indexOf(\"mac\") === -1 ? window.devicePixelRatio : 1;\nconst canvas = document.getElementById('main-canvas');\n\nif (canvas) {\n    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n    const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\n    const interfaceRight = 200;\n    const interfaceTop = 20;\n    (canvas as HTMLCanvasElement).width = vw - interfaceRight;\n    (canvas as HTMLCanvasElement).height = vh - interfaceTop;\n}\n\nlet cursorX = 0;\nlet cursorY = 0;\n\nlet moveX = 0;\nlet moveY = 0;\n\nconst start = async () => {\n    const images = [await loadImage(\"./grass.png\"), await loadImage(\"./flowers.png\"), await loadImage(\"./dirt.png\")];\n    const house = await loadImage(\"./house.png\");\n    const s = (house.width / 8) - 4;\n    const defaultHeight = images[0].height;\n\n    const getNextCursorAdjacentTile = (): Drawable => {\n        let ox = (-width * s - offsetX - s) / 2;\n        let oy = (s + offsetY) / 2;\n        let x = Math.floor(((cursorY / (2 * scale) - oy) / (s / 2)) + ((-cursorX / (scale * 2) - ox) / s));\n        let y = Math.floor(((cursorY / (2 * scale) - oy) / (s / 2)) - ((-cursorX / (scale * 2) - ox) / s));\n\n        x = Math.min(width - 1, Math.max(0, x));\n        y = Math.min(height - 1, Math.max(0, y));\n\n        return board.filter(d => d.x === x && d.y === y)[0];\n    };\n\n    const buildHouse = () => {\n        const tile = getNextCursorAdjacentTile();\n        const x = tile.x;\n        const y = tile.y;\n        board.splice(board.indexOf(tile), 1);\n\n        board = board.filter(d => d.x !== x || d.y !== y);\n        board.push({\n            x: x,\n            y: y,\n            z: 0,\n            draw: (ctx: CanvasRenderingContext2D) => {\n                ctx.drawImage(\n                    house,\n                    2 + (house.width / 4) * 3,\n                    2,\n                    house.width / 4 - 4,\n                    house.height - 4,\n                    (s * (width - x + y) + offsetX) * scale, ((x + y) * (s / 2) + (defaultHeight - house.height) + offsetY) * scale,\n                    (house.width / 4 - 4) * scale,\n                    (house.height - 4) * scale\n                );\n            }\n        });\n    };\n\n\n    if (canvas) {\n        canvas.onmouseup = () => {\n            buildHouse();\n        };\n\n        canvas.addEventListener(\"mousemove\", event => {\n            moveX = 0;\n            moveY = 0;\n\n            const speed = 10;\n            const edge = 30;\n\n            if (event.offsetX < edge) {\n                moveX = speed;\n            }\n\n            if (event.offsetY < edge) {\n                moveY = speed;\n            }\n\n            if (event.offsetX > (canvas as HTMLCanvasElement).width - edge) {\n                moveX = -speed;\n            }\n\n            if (event.offsetY > (canvas as HTMLCanvasElement).height - edge) {\n                moveY = -speed;\n            }\n        });\n\n        canvas.addEventListener(\"mouseleave\", event => {\n            moveX = 0;\n            moveY = 0;\n        });\n    }\n\n    document.addEventListener(\"mousemove\", event => {\n        cursorX = event.offsetX;\n        cursorY = event.offsetY;\n    });\n\n    document.onkeypress = (event) => {\n        switch (event.key) {\n            case \"w\":\n                scale = Math.min(scale + 0.25, 1.5);\n                break;\n            case \"s\":\n                scale = Math.max(0.5, scale - 0.25);\n                break;\n        }\n    };\n\n    const generateBoard = (height: number, width: number) => {\n        const result: Array<Drawable> = [];\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const choose = getRandomInt(images.length)\n                const direction = getRandomInt(4)\n                const img = images[choose];\n                result.push({\n                    x: x, y: y, z: 0, draw: (ctx: CanvasRenderingContext2D) => {\n                        const s = (img.width / 8) - 4;\n                        ctx.drawImage(\n                            img,\n                            2 + (img.width / 4) * direction,\n                            2,\n                            img.width / 4 - 4,\n                            img.height - 4,\n                            (s * (width - x + y) + offsetX) * scale, ((x + y) * (s / 2) + (defaultHeight - img.height) + offsetY) * scale,\n                            (img.width / 4 - 4) * scale,\n                            (img.height - 4) * scale\n                        );\n                    }\n                });\n            }\n        }\n\n        return result;\n    }\n\n    const getHouseOverlay = (width: number, height: number): Drawable => {\n        const tile = getNextCursorAdjacentTile();\n        const x = tile.x;\n        const y = tile.y;\n\n        return {\n            x: x,\n            y: y,\n            z: 0,\n            draw: (ctx: CanvasRenderingContext2D) => {\n                ctx.globalAlpha = 0.85;\n                ctx.drawImage(\n                    house,\n                    2 + (house.width / 4) * 3,\n                    2,\n                    house.width / 4 - 4,\n                    house.height - 4,\n                    (s * (width - x + y) + offsetX) * scale, ((x + y) * (s / 2) + (defaultHeight - house.height) + offsetY) * scale,\n                    (house.width / 4 - 4) * scale,\n                    (house.height - 4) * scale\n                );\n                ctx.globalAlpha = 1.0;\n            }\n        };\n    }\n\n    const width = 12;\n    const height = 12;\n    let board = await generateBoard(height, width);\n\n    const drawBoard = () => {\n        offsetX += moveX / divider / scale;\n        offsetY += moveY / divider / scale;\n\n        if (canvas) {\n            const ctx = (canvas as HTMLCanvasElement).getContext('2d');\n            if (ctx) {\n                ctx.clearRect(0, 0, (canvas as HTMLCanvasElement).width, (canvas as HTMLCanvasElement).height);\n                [...board, getHouseOverlay(width, height)].sort((a, b) => (a.x + a.y) < (b.x + b.y) ? -1 : 1).forEach(d => d.draw(ctx));\n            }\n        }\n\n        requestAnimationFrame(drawBoard);\n    };\n\n    drawBoard();\n};\n\nstart();"],
  "mappings": "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",
  "names": []
}
