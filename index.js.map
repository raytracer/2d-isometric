{
  "version": 3,
  "sources": ["node_modules/preact/src/constants.js", "node_modules/preact/src/options.js", "node_modules/preact/src/create-element.js", "node_modules/preact/src/component.js", "node_modules/preact/src/create-context.js", "node_modules/preact/src/util.js", "node_modules/preact/src/diff/children.js", "node_modules/preact/src/diff/props.js", "node_modules/preact/src/diff/index.js", "node_modules/preact/src/render.js", "node_modules/preact/src/clone-element.js", "node_modules/preact/src/diff/catch-error.js", "node_modules/preact/hooks/src/index.js", "util.ts", "board.ts", "building.ts", "gamestate.ts", "screen.ts", "index.tsx"],
  "sourcesContent": ["export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError,\n\t_vnodeId: 0\n};\n\nexport default options;\n", "import options from './options';\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 3) {\n\t\tchildren = [children];\n\t\t// https://github.com/preactjs/preact/issues/1916\n\t\tfor (i = 3; i < arguments.length; i++) {\n\t\t\tchildren.push(arguments[i]);\n\t\t}\n\t}\n\tif (children != null) {\n\t\tnormalizedProps.children = children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++options._vnodeId : original\n\t};\n\n\tif (options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/**\n * Asynchronously schedule a callback\n * @type {(cb: () => void) => void}\n */\n/* istanbul ignore next */\n// Note the following line isn't tree-shaken by rollup cuz of rollup/rollup#2566\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet queue;\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\trerenderQueue = [];\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\n\t\tqueue.some(c => {\n\t\t\tif (c._dirty) renderComponent(c);\n\t\t});\n\t}\n}\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function(_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(enqueueRender);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType = context);\n}\n", "/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (typeof childVNode == 'string' || typeof childVNode == 'number') {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tnull,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children != null && // Can be null if childVNode suspended\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Browsers will infer an option's `value` from `textContent` when\n\t\t\t// no value is present. This essentially bypasses our code to set it\n\t\t\t// later in `diff()`. It works fine in all browsers except for IE11\n\t\t\t// where it breaks setting `select.value`. There it will be always set\n\t\t\t// to an empty string. Re-applying an options value will fix that, so\n\t\t\t// there are probably some internal data structures that aren't\n\t\t\t// updated properly.\n\t\t\t//\n\t\t\t// To fix it we make sure to reset the inferred value, so that our own\n\t\t\t// value check in `diff()` won't be skipped.\n\t\t\tif (!isHydrating && newParentVNode.type === 'option') {\n\t\t\t\t// @ts-ignore We have validated that the type of parentDOM is 'option'\n\t\t\t\t// in the above check\n\t\t\t\tparentDom.value = '';\n\t\t\t} else if (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\tfor (let tmp = 0; tmp < childVNode._children.length; tmp++) {\n\t\tlet vnode = childVNode._children[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tvnode,\n\t\t\t\t\tvnode,\n\t\t\t\t\tchildVNode._children,\n\t\t\t\t\tvnode._dom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 2\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink[H:h]/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t// The value `false` is different from the attribute not\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t// that other VDOM frameworks also always stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (\n\t\t\tvalue != null &&\n\t\t\t(value !== false || (name[0] === 'a' && name[1] === 'r'))\n\t\t) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { Component } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\tc.props = newProps;\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\n\t\t\t\t\tc._vnode = newVNode;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc.state = c._nextState;\n\n\t\t\tif ((tmp = options._render)) tmp(newVNode);\n\n\t\t\tc._dirty = false;\n\t\t\tc._vnode = newVNode;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t(child === dom ||\n\t\t\t\t\t(nodeType ? child.localName == nodeType : child.nodeType == 3))\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren =\n\t\t\texcessDomChildren && EMPTY_ARR.slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (let i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tdom.firstChild,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value || (nodeType === 'progress' && !i))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\n\t}\n\n\tlet dom;\n\tif (!skipRemove && typeof vnode.type != 'function') {\n\t\tskipRemove = (dom = vnode._dom) != null;\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._dom = vnode._nextDom = undefined;\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) unmount(r[i], parentVNode, skipRemove);\n\t\t}\n\t}\n\n\tif (dom != null) removeNode(dom);\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ, EMPTY_ARR } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = (\n\t\t(!isHydrating && replaceNode) ||\n\t\tparentDom\n\t)._children = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? EMPTY_ARR.slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 3) {\n\t\tchildren = [children];\n\t\tfor (i = 3; i < arguments.length; i++) {\n\t\t\tchildren.push(arguments[i]);\n\t\t}\n\t}\n\tif (children != null) {\n\t\tnormalizedProps.children = children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n */\nexport function _catchError(error, vnode) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error);\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n/**\n * Keep track of the previous component so that we can set\n * `currentComponent` to `null` and throw when a hook is invoked\n * outside of render\n * @type {import('./internal').Component}\n */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\thooks._pendingEffects = [];\n\t}\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks && c.__hooks._pendingEffects.length) {\n\t\tafterPaint(afterPaintEffects.push(c));\n\t}\n\tcurrentComponent = previousComponent;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\ttry {\n\t\t\tc.__hooks._list.forEach(invokeCleanup);\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({});\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst nextValue = hookState._reducer(hookState._value[0], action);\n\t\t\t\tif (hookState._value[0] !== nextValue) {\n\t\t\t\t\thookState._value = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\t}\n\n\treturn hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._args = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') ref(createHandle());\n\t\t\telse if (ref) ref.current = createHandle();\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._value = factory();\n\t\tstate._args = args;\n\t\tstate._factory = factory;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tafterPaintEffects.forEach(component => {\n\t\tif (component._parentDom) {\n\t\t\ttry {\n\t\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\t} catch (e) {\n\t\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\t\toptions._catchError(e, component._vnode);\n\t\t\t}\n\t\t}\n\t});\n\tafterPaintEffects = [];\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tif (typeof hook._cleanup == 'function') hook._cleanup();\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n", "export const loadImage = (url: string): Promise<HTMLImageElement> => {\r\n    return new Promise(r => { let i = new Image(); i.onload = (() => r(i)); i.src = url; });\r\n}\r\n\r\nexport const getRandomInt = (max: number) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n", "import { Drawable } from \".\";\r\nimport { ScreenState } from \"./screen\";\r\nimport { getRandomInt } from \"./util\";\r\n\r\nexport interface Board {\r\n    drawables: Array<Drawable>\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport const generateBoard = (height: number, width: number, images: Array<HTMLImageElement>): Array<Drawable> => {\r\n    const result: Array<Drawable> = [];\r\n\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            const choose = getRandomInt(images.length)\r\n            const direction = getRandomInt(4)\r\n            const img = images[choose];\r\n            result.push({\r\n                x: x, y: y, z: 0, image: img, direction: direction, alpha: 1.0\r\n            });\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const getNextCursorAdjacentTile = (board: Board, ss: ScreenState, s: number) => {\r\n    let ox = (-board.width * s - ss.offsetX - s) / 2;\r\n    let oy = (s + ss.offsetY) / 2;\r\n    let x = Math.floor(((ss.cursorY / (2 * ss.scale) - oy) / (s / 2)) + ((-ss.cursorX / (ss.scale * 2) - ox) / s));\r\n    let y = Math.floor(((ss.cursorY / (2 * ss.scale) - oy) / (s / 2)) - ((-ss.cursorX / (ss.scale * 2) - ox) / s));\r\n\r\n    x = Math.min(board.width - 1, Math.max(0, x));\r\n    y = Math.min(board.height - 1, Math.max(0, y));\r\n\r\n    return {\r\n        x: x,\r\n        y: y\r\n    };\r\n};\r\n", "import { Drawable } from \".\";\r\nimport { Board, getNextCursorAdjacentTile } from \"./board\";\r\nimport { GameState } from \"./gamestate\";\r\nimport { ScreenState } from \"./screen\";\r\nimport { loadImage } from \"./util\";\r\n\r\nexport interface Building {\r\n    x: number;\r\n    y: number;\r\n    type: BuildingType;\r\n}\r\n\r\nexport interface Dimension {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport enum BuildingType { house };\r\n\r\nconst getDimension = (building: BuildingType): Dimension => {\r\n    switch (building) {\r\n        case BuildingType.house:\r\n            return {\r\n                width: 1,\r\n                height: 1\r\n            }\r\n    }\r\n}\r\n\r\nexport const getDrawableForBuilding = (building: Building, image: HTMLImageElement): Drawable => {\r\n    return {\r\n        x: building.x,\r\n        y: building.y,\r\n        z: 0,\r\n        image: image,\r\n        direction: 3,\r\n        alpha: 1\r\n    };\r\n};\r\n\r\nexport const loadBuildingImages = async () => {\r\n    const house = await loadImage(\"./house.png\");\r\n    return {\r\n        [BuildingType.house]: house\r\n    };\r\n}\r\n\r\nexport const getBuildingOverlay = (board: Board, ss: ScreenState, s: number, image: HTMLImageElement): Drawable => {\r\n    const tile = getNextCursorAdjacentTile(board, ss, s);\r\n    const x = tile.x;\r\n    const y = tile.y;\r\n\r\n    return {\r\n        x: x,\r\n        y: y,\r\n        z: 0,\r\n        image: image,\r\n        direction: 3,\r\n        alpha: 0.8\r\n    };\r\n}\r\n\r\nexport const build = (gameState: GameState, board: Board, ss: ScreenState, s: number, type: BuildingType) => {\r\n    const tile = getNextCursorAdjacentTile(board, ss, s);\r\n    const x = tile.x;\r\n    const y = tile.y;\r\n\r\n    if (gameState.buildings.filter(b => b.x === x && b.y === y).length === 0) {\r\n        gameState.buildings.push(\r\n            {\r\n                x: x,\r\n                y: y,\r\n                type: type\r\n            }\r\n        );\r\n    }\r\n};\r\n", "import { Building } from \"./building\";\r\n\r\nexport interface GameState {\r\n    buildings: Array<Building>\r\n}\r\n\r\nexport function updateState(state: GameState, timeDelta: number) {\r\n    return state;\r\n}", "import { Board } from \"./board\";\r\nimport { BuildingType } from \"./building\";\r\n\r\nexport interface ScreenState {\r\n    scale: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    cursorX: number;\r\n    cursorY: number;\r\n    moveX: number;\r\n    moveY: number;\r\n    buildMode: null | BuildingType;\r\n}\r\n\r\nexport const setUpCanvas = (canvas: HTMLCanvasElement, ss: ScreenState) => {\r\n    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\r\n    const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\r\n    const interfaceRight = 200;\r\n    const interfaceTop = 20;\r\n    canvas.width = vw - interfaceRight;\r\n    canvas.height = vh - interfaceTop;\r\n\r\n    canvas.addEventListener(\"mousemove\", event => {\r\n        ss.moveX = 0;\r\n        ss.moveY = 0;\r\n\r\n        const speed = 10;\r\n        const edge = 30;\r\n\r\n        if (event.offsetX < edge) {\r\n            ss.moveX = speed;\r\n        }\r\n\r\n        if (event.offsetY < edge) {\r\n            ss.moveY = speed;\r\n        }\r\n\r\n        if (event.offsetX > (canvas as HTMLCanvasElement).width - edge) {\r\n            ss.moveX = -speed;\r\n        }\r\n\r\n        if (event.offsetY > (canvas as HTMLCanvasElement).height - edge) {\r\n            ss.moveY = -speed;\r\n        }\r\n    });\r\n\r\n    canvas.addEventListener(\"mouseleave\", event => {\r\n        ss.moveX = 0;\r\n        ss.moveY = 0;\r\n    });\r\n\r\n    canvas.addEventListener(\"mousemove\", event => {\r\n        ss.cursorX = event.offsetX;\r\n        ss.cursorY = event.offsetY;\r\n    });\r\n\r\n    document.addEventListener(\"keyup\", event => {\r\n        console.log(ss.scale);\r\n        switch (event.key) {\r\n            case \"w\":\r\n                ss.scale = Math.min(ss.scale + 0.25, 1.5);\r\n                console.log(ss.scale);\r\n                break;\r\n            case \"s\":\r\n                ss.scale = Math.max(0.5, ss.scale - 0.25);\r\n                break;\r\n        }\r\n    });\r\n};\r\n\r\nexport const draw = (ctx: CanvasRenderingContext2D, x: number, y: number, board: Board, ss: ScreenState, defaultHeight: number, img: HTMLImageElement, direction: number, alpha: number) => {\r\n    const s = (img.width / 8) - 4;\r\n    ctx.globalAlpha = alpha;\r\n    ctx.drawImage(\r\n        img,\r\n        2 + (img.width / 4) * direction,\r\n        2,\r\n        img.width / 4 - 4,\r\n        img.height - 4,\r\n        (s * (board.width - x + y) + ss.offsetX) * ss.scale, ((x + y) * (s / 2) + (defaultHeight - img.height) + ss.offsetY) * ss.scale,\r\n        (img.width / 4 - 4) * ss.scale,\r\n        (img.height - 4) * ss.scale\r\n    );\r\n    ctx.globalAlpha = 1.0;\r\n}", "import { Fragment, h, render } from \"preact\";\r\nimport { useRef, useEffect } from \"preact/hooks\";\r\nimport { Board, generateBoard } from \"./board\";\r\nimport { build, BuildingType, getBuildingOverlay, getDrawableForBuilding, loadBuildingImages } from \"./building\";\r\nimport { GameState, updateState } from \"./gamestate\";\r\nimport { draw, ScreenState, setUpCanvas } from \"./screen\";\r\nimport { loadImage } from \"./util\";\r\n\r\nexport interface Drawable {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    image: HTMLImageElement;\r\n    direction: number;\r\n    alpha: number;\r\n}\r\n\r\nexport const divider = window.navigator.platform.toLowerCase().indexOf(\"mac\") === -1 ? window.devicePixelRatio : 1;\r\n\r\nconst screenState: ScreenState = {\r\n    scale: 1.0,\r\n    offsetX: 0,\r\n    offsetY: 0,\r\n    cursorX: 0,\r\n    cursorY: 0,\r\n    moveX: 0,\r\n    moveY: 0,\r\n    buildMode: null\r\n}\r\n\r\nconst start = async () => {\r\n    const images = [await loadImage(\"./grass.png\"), await loadImage(\"./flowers.png\"), await loadImage(\"./dirt.png\")];\r\n    const buildingImages = await loadBuildingImages();\r\n    const s = (buildingImages[BuildingType.house].width / 8) - 4;\r\n    const defaultHeight = images[0].height;\r\n    const width = 12;\r\n    const height = 12;\r\n\r\n\r\n    let board: Board = {\r\n        width: width,\r\n        height: height,\r\n        drawables: generateBoard(height, width, images)\r\n    }\r\n\r\n    function Isometric(props: any) {\r\n        const canvasRef = useRef<HTMLCanvasElement>(null);\r\n        let gameState: GameState = { buildings: [] };\r\n\r\n        useEffect(() => {\r\n            const canvas = canvasRef.current;\r\n            let lastTime: number | null = null;\r\n            if (canvas) {\r\n                setUpCanvas(canvas, screenState);\r\n                let animationFrameId: number;\r\n                const drawBoard = (time: number) => {\r\n                    const timeFactor = lastTime === null ? 0 : (time - lastTime) / 10;\r\n                    lastTime = time;\r\n                    screenState.offsetX += timeFactor * screenState.moveX / divider / screenState.scale;\r\n                    screenState.offsetY += timeFactor * screenState.moveY / divider / screenState.scale;\r\n\r\n                    gameState = updateState(gameState, time - lastTime);\r\n\r\n                    const ctx = canvas.getContext('2d');\r\n                    if (ctx) {\r\n                        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                        const buildingDrawables = gameState.buildings.map(b => getDrawableForBuilding(b, buildingImages[b.type]));\r\n                        const tileDrawables = [...board.drawables].filter(td => buildingDrawables.find(bd => bd.x === td.x && bd.y === td.y) === undefined);\r\n                        const allDrawables = [...tileDrawables, ...buildingDrawables];\r\n                        if (screenState.buildMode !== null) allDrawables.push(getBuildingOverlay(board, screenState, s, buildingImages[BuildingType.house]));\r\n                        allDrawables.sort((a, b) => (a.x + a.y) < (b.x + b.y) ? -1 : 1).forEach(d => draw(ctx, d.x, d.y, board, screenState, defaultHeight, d.image, d.direction, d.alpha));\r\n                    }\r\n\r\n                    animationFrameId = requestAnimationFrame(drawBoard);\r\n                };\r\n\r\n                requestAnimationFrame(drawBoard)\r\n\r\n                return () => {\r\n                    window.cancelAnimationFrame(animationFrameId);\r\n                }\r\n            }\r\n        }, []);\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"top\">top</div>\r\n                <div className=\"main\">\r\n                    <canvas onMouseUp={() => { if (screenState.buildMode !== null) build(gameState, board, screenState, s, screenState.buildMode); }} ref={canvasRef} id=\"main-canvas\" width=\"1500\" height=\"1000\"></canvas>\r\n                    <div className=\"right\"><button onClick={() => { screenState.buildMode = BuildingType.house; }}>Build House</button></div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    render(<Isometric />, document.body);\r\n};\r\n\r\nstart();\r\n"],
  "mappings": "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",
  "names": []
}
