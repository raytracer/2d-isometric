{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["const loadImage = (url: string): Promise<HTMLImageElement> => {\n    return new Promise(r => { let i = new Image(); i.onload = (() => r(i)); i.src = url; });\n}\n\nconst getRandomInt = (max: number) => {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\ninterface Drawable {\n    x: number;\n    y: number;\n    z: number;\n    draw: (ctx: CanvasRenderingContext2D) => void;\n}\n\nlet scale = 1.0;\nlet offsetX = 0;\nlet offsetY = 0;\nlet pressed = false;\nconst divider = window.navigator.platform.toLowerCase().indexOf(\"mac\") === -1 ? window.devicePixelRatio : 1;\n\nlet cursorX = 0;\nlet cursorY = 0;\n\ndocument.onmousedown = () => pressed = true;\ndocument.onmouseup = () => pressed = false;\ndocument.onmousemove = (event) => {\n    if (pressed) {\n        offsetX += event.movementX / divider / scale;\n        offsetY += event.movementY / divider / scale;\n    };\n\n    cursorX = event.offsetX;\n    cursorY = event.offsetY;\n}\n\ndocument.onkeypress = (event) => {\n    switch (event.key) {\n        case \"w\":\n            scale = Math.min(scale + 0.25, 1.5);\n            break;\n        case \"s\":\n            scale = Math.max(0.5, scale - 0.25);\n            break;\n    }\n};\n\nconst start = async () => {\n    const images = [await loadImage(\"./grass.png\"), await loadImage(\"./flowers.png\"), await loadImage(\"./dirt.png\")];\n    const house = await loadImage(\"./house.png\");\n    const defaultHeight = images[0].height;\n\n    const generateBoard = (height: number, width: number) => {\n        const result: Array<Drawable> = [];\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const choose = getRandomInt(images.length)\n                const direction = getRandomInt(4)\n                const img = images[choose];\n                result.push({\n                    x: x, y: y, z: 0, draw: (ctx: CanvasRenderingContext2D) => {\n                        const s = (img.width / 8) - 4;\n                        ctx.drawImage(\n                            img,\n                            2 + (img.width / 4) * direction,\n                            2,\n                            img.width / 4 - 4,\n                            img.height - 4,\n                            (s * (width - x + y) + offsetX) * scale, ((x + y) * (s / 2) + (defaultHeight - img.height) + offsetY) * scale,\n                            (img.width / 4 - 4) * scale,\n                            (img.height - 4) * scale\n                        );\n                    }\n                });\n            }\n        }\n\n        return result;\n    }\n\n    const getHouseOverlay = (width: number, height: number): Drawable => {\n        const s = (house.width / 8) - 4;\n        let ox = (-width * s - offsetX - s) / 2;\n        let oy = (s + offsetY) / 2;\n        let x = Math.floor(((cursorY / (2 * scale) - oy) / (s / 2)) + ((-cursorX / (scale * 2) - ox) / s));\n        let y = Math.floor(((cursorY / (2 * scale) - oy) / (s / 2)) - ((-cursorX / (scale * 2) - ox) / s));\n\n        x = Math.min(width - 1, Math.max(0, x));\n        y = Math.min(height - 1, Math.max(0, y));\n\n        return {\n            x: x,\n            y: y,\n            z: 0,\n            draw: (ctx: CanvasRenderingContext2D) => {\n                ctx.globalAlpha = 0.85;\n                ctx.drawImage(\n                    house,\n                    2 + (house.width / 4) * 3,\n                    2,\n                    house.width / 4 - 4,\n                    house.height - 4,\n                    (s * (width - x + y) + offsetX) * scale, ((x + y) * (s / 2) + (defaultHeight - house.height) + offsetY) * scale,\n                    (house.width / 4 - 4) * scale,\n                    (house.height - 4) * scale\n                );\n                ctx.globalAlpha = 1.0;\n            }\n        };\n    }\n\n\n    const width = 12;\n    const height = 12;\n    const board = await generateBoard(height, width);\n\n    const drawBoard = () => {\n        const canvas = document.getElementById('main-canvas');\n\n        if (canvas) {\n            const ctx = (canvas as HTMLCanvasElement).getContext('2d');\n            if (ctx) {\n                ctx.clearRect(0, 0, (canvas as HTMLCanvasElement).width, (canvas as HTMLCanvasElement).height);\n                [...board, getHouseOverlay(width, height)].sort((a, b) => (a.x + a.y) < (b.x + b.y) ? -1 : 1).forEach(d => d.draw(ctx));\n            }\n        }\n\n        requestAnimationFrame(drawBoard);\n    };\n\n    drawBoard();\n};\n\nstart();"],
  "mappings": "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",
  "names": []
}
